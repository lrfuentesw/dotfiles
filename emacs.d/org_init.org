* Elisp personal
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src
* Typografía
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "Source Code Pro:pixelsize=14"))
#+end_src
* Temas

#+BEGIN_SRC emacs-lisp
	;; Sección de temas
	;; (use-package moe-theme
	;;   :ensure t)
	;; (use-package gruvbox-theme
	;;   :ensure t)
	  ;; (use-package nimbus-theme
	  ;;   :ensure t
	  ;;   :config
	  ;;   (load-theme 'nimbus t))
	;; (use-package spacemacs-theme
	;;   :defer t)
	;; (use-package cyberpunk-theme
	;;   :ensure ti)
	(use-package doom-themes
  ;;       (use-package kaolin-themes
	  :ensure t
	  :init
	  (setq doom-themes-enable-bold t)
      ;;	doom-themes-enable-italic t)
	  :config
	  (doom-themes-visual-bell-config)
	  (doom-themes-org-config)
	  (load-theme 'doom-tomorrow-night t))
      ;;   (kaolin-treemacs-theme))
	;; Termina sección de temas
	;; (load-theme 'modus-vivendi t)
	;; (add-to-list 'custom-theme-load-path "~/apps/emacs-leuven-theme")
	;; (load-theme 'leuven-dark t)
	;; (use-package modus-themes
	;;   :ensure
	;;   :init
	;;   ;; Add all your customizations prior to loading the themes
	;;   (setq modus-themes-headings '((t . rainbow-section)))


	;;   ;; Load the theme files before enabling a theme
	;;   (modus-themes-load-themes)
	;;   :config
	;;   ;; Load the theme of your choice:
	;;   (modus-themes-load-vivendi)
	;;   :bind ("<f5>" . modus-themes-toggle))

#+END_SRC

* Try
#+BEGIN_SRC emacs-lisp
;; Para probar paquetes sin instalarlos permanentemente
(use-package try
  :ensure t)
#+END_SRC

* Which key
#+BEGIN_SRC emacs-lisp
;; Para ayuda con las combinaciones de teclas
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* Org mode
** Bullets
#+BEGIN_SRC emacs-lisp
;; Bullets para org mode
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))
#+END_SRC
** GTD
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
     (require 'org)
     (setq org-todo-keywords
	   '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELED")))
   #+end_src
* Ace windows
#+BEGIN_SRC emacs-lisp
;; Agrega ace-window para manejar ventanas
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap-other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

* Ivy, counsel y swiper
#+BEGIN_SRC emacs-lisp
;; Counsel
(use-package counsel
  :ensure t)

;; Ivy
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

;; Swiper
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
;; Magit
(use-package magit
  :ensure t)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
;; Projectile
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
  (setq projectile-project-search-path '("~/Dev/proyectos/"))
  (setq projectile-completion-system 'ivy))
#+END_SRC

* Smartparents
#+begin_src emacs-lisp
  (use-package smartparens
    :defer)
#+end_src
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode))
#+END_SRC
* Python
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :hook ((python-mode . lsp)))

    (use-package lsp-ui
      :commands lsp-ui-mode)
  #+end_src
* Yasnippet
#+BEGIN_SRC emacs-lisp
  ;; YASnippet
  (use-package yasnippet
    :ensure t)
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

* Org-roam
#+BEGIN_SRC emacs-lisp
  (setq org-roam-v2-ack t)
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Documentos/cerebro/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    (require 'org-roam-protocol))
#+END_SRC

* Flutter
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode :ensure t)
  (use-package lsp-dart
    :init
    (setq lsp-dart-sdk-dir "/opt/flutter/bin/cache/dart-sdk/")
    (setq lsp-dart-flutter-sdk-dir "/opt/flutter/")
    :ensure t
    :hook (dart-mode . lsp))
#+END_SRC

* Go
#+begin_src emacs-lisp
  (use-package go-mode :ensure t)
  (add-hook 'go-mode-hook #'lsp-deferred)

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src

* Rust
** Rustic
   #+begin_src emacs-lisp
     (use-package rustic
       :ensure
       :bind (:map rustic-mode-map
		   ("M-j" . lsp-ui-imenu)
		   ("M-?" . lsp-find-references)
		   ("C-c C-c l" . flycheck-list-errors)
		   ("C-c C-c a" . lsp-execute-code-action)
		   ("C-c C-c r" . lsp-rename)
		   ("C-c C-c q" . lsp-workspace-restart)
		   ("C-c C-c Q" . lsp-workspace-shutdown)
		   ("C-c C-c s" . lsp-rust-analyzer-status))
       :config
       ;; uncomment for less flashiness
       ;; (setq lsp-eldoc-hook nil)
       ;; (setq lsp-enable-symbol-highlighting nil)
       ;; (setq lsp-signature-auto-activate nil)

       ;; comment to disable rustfmt on save
       (setq rustic-format-on-save t)
       (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

     (defun rk/rustic-mode-hook ()
       ;; so that run C-c C-c C-r works without having to confirm, but don't try to
       ;; save rust buffers that are not file visiting. Once
       ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
       ;; no longer be necessary.
       (when buffer-file-name
	 (setq-local buffer-save-without-query t)))
   #+end_src
** Lsp
   #+begin_src emacs-lisp
	(use-package lsp-mode
	  :ensure
	  :commands lsp
	  :custom
	  ;; what to use when checking on-save. "check" is default, I prefer clippy
	  (lsp-rust-analyzer-cargo-watch-command "clippy")
	  (lsp-eldoc-render-all t)
	  (lsp-rust-analyzer-server-display-inlay-hints t)
	  :config
	  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

	(use-package lsp-ui
	  :ensure
	  :commands lsp-ui-mode
	  :custom
	  (lsp-ui-peek-always-show t)
	  (lsp-ui-sideline-show-hover t)
	  (lsp-ui-doc-enable nil))

	(use-package company
	  :ensure
	  :hook (scala-mode . company-mode)
	  :config
	  (setq lsp-completion-provider :capf))

	(use-package lsp-ivy :ensure :commands lsp-ivy-workspace-symbol)
   #+end_src
* C++
  #+begin_src emacs-lisp
    (add-hook 'c-mode-hook 'lsp)
    (add-hook 'c++-mode-hook 'lsp)

    (setq gc-cons-threshold (* 100 1024 1024)
	  read-process-output-max (* 1024 1024)
	  treemacs-space-between-root-nodes nil
	  lsp-idle-delay 0.6)  ;; clangd is fast

    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
      (require 'dap-cpptools)
      (yas-global-mode))
  #+end_src
* Php
  #+begin_src emacs-lisp
    (use-package php-mode
      :ensure t
      :mode
      ("\\.php\\'" . php-mode))
    (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
    (use-package phpunit
      :ensure t)
    (provide 'lang-php)
    (use-package lsp-mode
      :config
      (setq lsp-prefer-flymake nil)
      :hook (php-mode . lsp)
      :commands lsp)
  #+end_src
* COMMENT Ledger
  #+begin_src emacs-lisp
    (use-package ledger-mode
      :ensure t
      :init
      (setq ledger-clear-whole-transactions 1))
  #+end_src
* Adecuaciones generales
** Sin menu ni marco
#+BEGIN_SRC emacs-lisp
  ;; This is bound to f11 in Emacs 24.4
  ;; (toggle-frame-fullscreen)
  ;; Who use the bar to scroll?
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
#+END_SRC
** Hace ibuffer el defult
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC
** Lineas
#+BEGIN_SRC emacs-lisp
(setq truncate-lines t)
(setq visual-line-mode t)
#+END_SRC
** Borrar espacios sobrantes
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Transparencia
#+begin_src emacs-lisp
  ;; set transparency
  (set-frame-parameter (selected-frame) 'alpha '(95 75))
  (add-to-list 'default-frame-alist '(alpha 95 75))
#+end_src
** Mode line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
* C#
** C# mode
#+begin_src emacs-lisp
  (use-package csharp-mode
    :ensure t
    :init
    (add-hook 'csharp-mode-hook #'company-mode)
    (add-hook 'csharp-mode-hook #'rainbow-delimiters-mode))
#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company :ensure t :mode "company-mode")
  (use-package company-box :ensure t
    :hook (company-mode . company-box-mode))
#+end_src
** Omnisharp
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((csharp-mode . lsp)
	   (python-mode . (lambda ()
			    (require 'lsp-python-ms)
			    (lsp))))
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  (use-package lsp-treemacs
    :ensure t
    :commands lsp-treemacs-errors-list)
#+end_src
